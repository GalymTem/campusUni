-- === Настройка сессии (необязательно, но полезно) ============================
SET client_encoding TO 'UTF8';
SET search_path TO public;

-- === 1) SELECT * FROM table LIMIT 10 ========================================
SELECT * FROM "Artist"  LIMIT 10;
SELECT * FROM "Album"   LIMIT 10;
SELECT * FROM "Track"   LIMIT 10;
SELECT * FROM "Customer" LIMIT 10;
SELECT * FROM "Invoice" LIMIT 10;
SELECT * FROM "InvoiceLine" LIMIT 10;

-- === 2) WHERE + ORDER BY (фильтрация и сортировка) ==========================
-- Треки жанра Rock (GenreId=1) c ценой >= 0.99 — самые длинные сверху
SELECT "TrackId","Name","GenreId","UnitPrice","Milliseconds"
FROM "Track"
WHERE "GenreId" = 1
  AND "UnitPrice" >= 0.99
ORDER BY "Milliseconds" DESC
LIMIT 10;

-- Клиенты из USA, отсортированы по фамилии
SELECT "CustomerId","FirstName","LastName","Country","Email"
FROM "Customer"
WHERE "Country" = 'USA'
ORDER BY "LastName","FirstName"
LIMIT 10;

-- === 3) GROUP BY + COUNT/AVG/MIN/MAX (агрегации) ============================
-- 3.1 Средняя/минимальная/максимальная длина трека по жанрам
SELECT g."Name" AS genre,
       COUNT(*)                         AS tracks_cnt,
       AVG(t."Milliseconds")::int       AS avg_ms,
       MIN(t."Milliseconds")            AS min_ms,
       MAX(t."Milliseconds")            AS max_ms
FROM "Track" t
JOIN "Genre" g ON g."GenreId" = t."GenreId"
GROUP BY g."Name"
ORDER BY tracks_cnt DESC;

-- 3.2 Средний чек и кол-во инвойсов по странам (только страны с >= 5 инвойсами)
SELECT i."BillingCountry"               AS country,
       COUNT(*)                         AS invoices_cnt,
       AVG(i."Total")                   AS avg_invoice_total,
       MIN(i."Total")                   AS min_invoice_total,
       MAX(i."Total")                   AS max_invoice_total
FROM "Invoice" i
GROUP BY country
HAVING COUNT(*) >= 5
ORDER BY avg_invoice_total DESC;

-- === 4) JOIN (минимум один; здесь несколько показательных) ==================
-- 4.1 Сумма по каждому инвойсу (Invoice + Customer + InvoiceLine)
SELECT i."InvoiceId",
       i."InvoiceDate",
       (c."FirstName" || ' ' || c."LastName") AS customer,
       SUM(il."UnitPrice" * il."Quantity")    AS invoice_total
FROM "Invoice" i
JOIN "Customer" c   ON c."CustomerId" = i."CustomerId"
JOIN "InvoiceLine" il ON il."InvoiceId" = i."InvoiceId"
GROUP BY i."InvoiceId", i."InvoiceDate", customer
ORDER BY invoice_total DESC
LIMIT 10;

-- 4.2 Выручка по артистам (Artist -> Album -> Track -> InvoiceLine)
SELECT ar."Name"                           AS artist,
       SUM(il."UnitPrice" * il."Quantity") AS revenue
FROM "Artist" ar
JOIN "Album"  al ON al."ArtistId" = ar."ArtistId"
JOIN "Track"  t  ON t."AlbumId"   = al."AlbumId"
JOIN "InvoiceLine" il ON il."TrackId" = t."TrackId"
GROUP BY artist
ORDER BY revenue DESC
LIMIT 15;

-- 4.3 Выручка по жанрам (Genre -> Track -> InvoiceLine)
SELECT g."Name"                           AS genre,
       SUM(il."UnitPrice" * il."Quantity") AS revenue,
       COUNT(DISTINCT t."TrackId")         AS tracks_sold
FROM "Genre" g
JOIN "Track" t      ON t."GenreId" = g."GenreId"
JOIN "InvoiceLine" il ON il."TrackId" = t."TrackId"
GROUP BY genre
ORDER BY revenue DESC;
